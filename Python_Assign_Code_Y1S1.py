#LAU CHIN REN
#TP079138
#LEE XIN KHER
#TP079243

import time
from datetime import datetime


def init():
    
    welcome = 1
    print("Welcome to bank!")

    while welcome == 1:
        print("Do you have account with us:")
        print("1. Login ")
        print("2. Register ")
        haveAccount = input("Please choose a selection : ")
        if(haveAccount == "1"):
            welcome = 2
            login()
            break
        
        elif(haveAccount == "2"):
            welcome = 2
            register()
            break
        
        else:
            print("You have selected invalid option. Please try again")
    haveAccount = input("Please choose a selection : ")

def login():
    print("-------LOGIN PAGE-------")
    while True:
        login_acc_number = input("Account Number:")
        login_acc_password = input("Account password:")
        if login_acc_number == "admin" and login_acc_password == "admin123":
            print("Welcome to staff system!")
            admin()
            break
        
        else :
            with open("login.txt", "r") as file:
                for line in file:
                    register_Acc_num, register_default_password = line.strip().split(",")
                    if login_acc_number == register_Acc_num and login_acc_password == register_default_password:
                        print("Login Successful.")
                        bank_menu(login_acc_number)
                        return
        print("Wrong Password or Account number. Please try again.")
        
                
def register():
    print("-----------REGISTER PAGE------------")
    print("Please fill in the register form.")
    register_name = input("Customer name :")
    register_birth = input("Customer birth :")
    register_ic = int(input("Customer IC :"))
            
    register_address = input("Customer address :")
    register_Acc_num = generationAccountNumber()
    register_default_password = generationDefaultPassword()
    print("The minimum balance of Saving account is RM 100.")
    print("The minimum balance of Current account is RM 500.")
    register_acc_type = input("Account type (Saving/Current) :")
    if register_acc_type == "Saving":
        register_amount = 100
    else :
        register_amount = 500
    transaction_type = "Deposit"
    balance = register_amount

    with open("customer_details.txt","a") as file1:
        customer_details = f"{register_name}\t{register_birth}\t{register_ic}\t{register_address}\t{register_Acc_num}\t{register_default_password}\t{register_acc_type}\t{register_amount}\n"
        file1.write(customer_details)

    with open("login.txt","a") as file2:
        login_info = f"{register_Acc_num},{register_default_password}\n"
        file2.write(login_info)

    with open("transaction_data.txt","a") as file3:
        transaction_type = "Deposit"
        transaction_info = f"{register_Acc_num},{register_acc_type},{transaction_type},{register_amount},{datetime.now()},{balance}\n"
        file3.write(transaction_info)

    with open("register_form.txt","a") as file4:
        register_form = f"{register_name},{register_birth},{register_ic},{register_address},{register_Acc_num},{register_default_password},{register_acc_type},{register_amount}\n"
        file4.write(register_form)
    
    print("Register account successful. Your register form will be sent to admin.")
    print("Thank you and welcome you.")
    print("This is your account number :", register_Acc_num)
    print("And this is your autogenerated password :",register_default_password)
    print("YOU SHOULD CHANGE YOUR PASSWORD WHEN FIRST TIME LOGIN")
    login()
    
def bank_menu(login_acc_number):
    with open("register_form.txt", "r") as register_file:
            for register_line in register_file:
                register_name, register_birth, register_ic, register_address, register_Acc_num, register_default_password, register_acc_type, register_amount = register_line.strip().split(",")
                if login_acc_number == register_Acc_num:
                    print(f"Welcome back , {register_name} !")
                    
    print("-------USER MENU-------")
    print("1. Profile")
    print("2. Deposit")
    print("3. Withdrawal")
    print("4. History of account")
    print("5. Exit System")

    menu = int(input("How can I help you? Please enter 1-5 :"))
    if menu == 1 :
        profile(login_acc_number)
    elif menu == 2 :
        deposit(login_acc_number)
    elif menu == 3 :
        withdrawal(login_acc_number)
    elif menu == 4 :
        generate_statement(login_acc_number)
    elif menu == 5 :
        print("Thank you for using our banking system. Goodbye!")
        quit()
    
    else:
        print("Invalid option")
        bank_menu(login_acc_number)
        

def admin():
    print("----ADMIN PANEL----")
    print("1. Create customer details")
    print("2. Update customer details")
    print("3. View customer details")
    print("4. View customer register form")
    print("5. Exit System")

    admin = int(input("Please choose an option:"))
    if admin == 1 :
        #saved_file()
        prompt_customer_details()
    elif admin == 2 :
        update_customer_details()
    elif admin == 3 :
        view_customer_details()
    elif admin == 4 :
        view_customer_register_form()
    elif admin == 5 :
        print("Exiting...")
        quit()
    else :
        print("invalid option")

def profile(account_number):
    print("-------PROFILE-------")
    with open("customer_details.txt","r") as register_file:
        for register_line in register_file:
            register_name, register_birth, register_ic, register_address, register_Acc_num, register_default_password, register_acc_type, register_amount = register_line.strip().split("\t")
            if account_number == register_Acc_num :
                print(f"Name: {register_name}")
                print(f"Date of Birth: {register_birth}")
                print(f"IC Number: {register_ic}")
                print(f"Address: {register_address}")
                print(f"Account Number: {register_Acc_num}")
                print(f"Account type: {register_acc_type}")
                print(f"Account balance: {register_amount}")
                print("\n")
                
                while True:
                    print("Do you want edit your profile?")
                    print("1. Change Password")
                    print("2. Exit to menu")
                    
                    register_choice = int(input("Please choose an option :"))
                    if register_choice == 1 :
                        change_password(account_number)
                        
                    
                    elif register_choice == 2 :
                        bank_menu(account_number)
                        return
                        
                    else:
                        print("Invalid choice. Please try again.")
                
    print("Profile not found.")
    
def change_password(account_number):
    new_password = input("Enter new password:")
    confirm_password = input("Confirm new password:")

    if new_password != confirm_password:
        print("Passwords do not match. Please try again.")
        return
    found = False
    change_in_file = []
    
    with open("customer_details.txt", "r") as file1:
        register_lines = file1.readlines()

    for lines in register_lines:
        register_name,register_birth,register_ic,register_address,register_Acc_num,register_default_password,register_acc_type,register_amount= lines.strip().split("\t")
        if account_number == register_Acc_num:
            change_in_file = f"{register_name}\t{register_birth}\t{register_ic}\t{register_address}\t{register_Acc_num}\t{new_password}\t{register_acc_type}\t{register_amount}\n"
            with open("customer_details.txt", "w") as file1:
                file1.writelines(change_in_file)

    with open("login.txt","r") as file:
        lines = file.readlines()

    for i in range(len(lines)):
        register_Acc_num, register_default_password = lines[i].strip().split(",")
        if account_number == register_Acc_num:
            lines[i] = f"{register_Acc_num},{new_password}\n"
            with open("login.txt","w") as file:
                file.writelines(lines)
            print("Password changed successfully!")
            profile(account_number)

def deposit(account_number):
    print("Please make a deposit")
    balance = read_balance(account_number)
    account_type = read_acc_type(account_number)
    
    while True:
        try:
            amount = float(input("Enter amount to deposit: RM"))
            if amount <= 0:
                print("Invalid deposit amount. Please enter a positive value.")
                continue
            # Update the balance
            balance += amount
            # Record the transaction
            update_balance(account_number, amount)
            transaction_type = "Deposit"
            record_transaction(account_number, account_type, transaction_type, amount)
            
            print("Deposit successful.")
            bank_menu(account_number)
            return
        
        except ValueError:
            print("Invalid input. Please enter a numeric value.")


def withdrawal(account_number):
    print("Please make a withdrawal")
    balance = read_balance(account_number)
    account_type = read_acc_type(account_number)
    min_balance = 100 if account_type == "Saving" else 500
    
    while True:
        try:
            amount = float(input("Enter amount to withdraw: RM"))
            if amount <= 0:
                print("Invalid withdrawal amount. Please enter a positive value.")
                continue
            if balance - amount < min_balance:
                print("Insufficient funds.")
                continue
            # Update the balance
            balance -= amount
            # Record the transaction
            update_balance(account_number, -amount)
            transaction_type = "Withdrawal"
            record_transaction(account_number, account_type, transaction_type, -amount)
            print("Withdrawal successful.")
            bank_menu(account_number)
            return
        
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def read_balance(account_number):
    with open("customer_details.txt", "r") as file:
        for line in file:
            data = line.strip().split('\t')
            if data[4] == account_number:
                return float(data[7])
    return 0 

def read_acc_type(account_number):
    with open("customer_details.txt", "r") as file:
        for line in file:
            data = line.strip().split('\t')
            if data[4] == account_number:
                return data[6]
    return 0

def record_transaction(account_number, account_type, transaction_type, amount):
    balance = read_balance(account_number)
    with open("transaction_data.txt", "a") as file:
        balance = read_balance(account_number)
        file.write(f"{account_number},{account_type},{transaction_type},{amount},{datetime.now()},{balance}\n")

def update_balance(account_number,amount):
    lines = []
    with open("customer_details.txt", "r") as file:
        for line in file:
            register_name, register_birth, register_ic, register_address, register_Acc_num, register_default_password, register_acc_type, register_amount = line.strip().split('\t')
            if register_Acc_num == account_number:
                newbalance = str(float(register_amount) + amount)  # Update the balance
    with open("customer_details.txt", "w") as file:
        file.writelines(f"{register_name}\t{register_birth}\t{register_ic}\t{register_address}\t{register_Acc_num}\t{register_default_password}\t{register_acc_type}\t{newbalance}")
        file.writelines("\n")


def generate_statement(account_number):
    start_date = input("Enter start date (YYYY-MM-DD): ")
    end_date = input("Enter end date (YYYY-MM-DD): ")
    balance = read_balance(account_number)  # Retrieve initial balance
    print("-----Statement of Account-----")
    print("Account Number:", account_number)
    print("Period:", start_date, "to", end_date)
    print("Transactions:")
    deposits = 0
    withdrawals = 0
    
    # Print transactions within the specified period and for the given account number
    with open("transaction_data.txt", "r") as file:
        for line in file:
            transaction_account_number, account_type, transaction_type, transaction_amount, transaction_date, acc_balance = line.strip().split(",")
            if transaction_account_number == account_number and start_date <= transaction_date <= end_date :
                amount = float(transaction_amount)
                if transaction_type == "Deposit":
                    print(f"{transaction_date}\tDeposit\t{transaction_amount}")
                    deposits += amount
                elif transaction_type == "Withdrawal":
                    print(f"{transaction_date}\tWithdrawal\t{transaction_amount}")
                    withdrawals += amount
                    
    print("Total deposits: RM", deposits)
    print("Total withdrawals: RM", withdrawals)
    print("End balance: RM", balance)

    bank_menu(account_number)
    
def update_customer_details():
    print("---------UPDATE CUSTOMER DETAILS---------")
    account_number = input("Enter customer's account number: ")

    # Check if the customer exists
    customer_found = False
    updated_customer_info = []

    with open("customer_details.txt", "r") as file:
        customer_details = file.readlines()

    for customer_line in customer_details:
        customer_info = customer_line.strip().split("\t")
        if len(customer_info) >= 6 and customer_info[4] == account_number:
            customer_found = True
            print("Customer found. Customer name, account number and account type are not able to edit.")
            print("Please update the details:")

                # Display existing details
            print(f"Name: {customer_info[0]}")
            print(f"Date of Birth: {customer_info[1]}")
            print(f"IC Number: {customer_info[2]}")
            print(f"Address: {customer_info[3]}")
            print(f"Password: {customer_info[5]}")

                # Prompt for updated details
            updated_birth = input("Enter new birth (or press Enter to keep unchanged): ")
            updated_ic = input("Enter new IC (or press Enter to keep unchanged): ")
            updated_address = input("Enter new address (or press Enter to keep unchanged): ")
            updated_password = input("Enter new password (or press Enter to keep unchanged): ")

                # Update customer information
            customer_info[1] = updated_birth if updated_birth else customer_info[1]
            customer_info[2] = updated_ic if updated_ic else customer_info[2]
            customer_info[3] = updated_address if updated_address else customer_info[3]
            customer_info[5] = updated_password if updated_password else customer_info[5]



            updated_customer_info.append("\t".join(customer_info) + "\n")


        else:
            updated_customer_info.append(customer_line)

    with open("login.txt","r") as file:
        lines = file.readlines()

    for i in range(len(lines)):
        register_Acc_num, register_default_password = lines[i].strip().split(",")
        if account_number == register_Acc_num:
            lines[i] = f"{register_Acc_num},{updated_password}\n"
            with open("login.txt","w") as file:
                file.writelines(lines)


    if not customer_found:
        print("Customer not found. Please try again.")
        admin()

    # Write updated customer information back to the file

    with open("customer_details.txt", "w") as file:
        file.writelines(updated_customer_info)

    print("Customer details updated successfully.")
    admin()

def view_customer_details():
    try:
        file = open("customer_details.txt","r")
        line = file.read()
        print("----CUSTOMER DETAILS----")
        print(f"Name\tBirth\t\tIC\t\tAddr\t\t\tAcc_number\tPassw\t\tAcc_type\tBalance")
        print(line)
        admin ()
    except:
        print ("File cannot be opened.")
        admin()

def view_customer_register_form():
    try:
        file = open("register_form.txt","r")
        line = file.read()
        print("----REGISTER FORM----")
        print(f"Name,Date of Birth,IC,Address,Acc_number,Default_Password,Acc_type,Balance")
        print(line)
        admin()
    except:
        print ("File cannot be opened.")
        admin()

def prompt_customer_details():
    while True :
        print("Customer Details :" )
        customer_name = input("Enter customer name:")
        customer_birth = input("Enter customer birth:")
        customer_IC = int(input("Enter customer IC:"))
        customer_address = input("Enter customer address:")
        customer_Acc_num = int(input("Enter account number:"))
        customer_default_password = input("Enter password:")
        customer_acc_type = input("Enter account type:")
        if customer_acc_type == "Saving" :
            customer_amount = 100
        else :
            customer_amount = 500
        with open("customer_details.txt","a") as customerdetails_info:
            customer_info = f"{customer_name}\t{customer_birth}\t{customer_IC}\t{customer_address}\t{customer_Acc_num}\t{customer_default_password}\t{customer_acc_type}\t{customer_amount}"
            customerdetails_info.write(customer_info)
            customerdetails_info.write("\n")
        with open("login.txt","a") as logindetails_info:
            login_info = f"{customer_Acc_num},{customer_default_password}"
            logindetails_info.write(login_info)
            logindetails_info.write("\n")
            print(f"Customer details have been saved to customer_details.txt.")
        
        continuedetail = input("Do you want to continue enter customer's details? (Yes/No):")
        if continuedetail not in ["Yes", "yes"]:
            print("Thank you.")
            admin()

def generationAccountNumber():
    # Use current time in milliseconds to generate a pseudo-random number
    millis = int(time.time() * 1000)
    account_number = (millis % 999999999) + 111111111
    return account_number

def generationDefaultPassword():
    # Use current time in milliseconds to generate a pseudo-random number
    millis = int(time.time() * 1000)
    password = str(millis)[-4:]  # Take the last 4 digits of the current time
    return password

    
    
        
init()  

        
        
        
        
